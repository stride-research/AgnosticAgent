[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agnostic_agent"
version = "0.1.0"
description = "Agentic AI Framework"
license = { text = "MIT" }
authors = [
  { name = "Javier Dominguez", email = "an@example.com" },
  { name = "Aymen Alsadi", email = "another@example.com" },
  { name = "Yousef Amirghofran", email = "another@example.com" },
  { name = "Matteo Turilli", email = "matteo.turilli@gmail.com" }
]
keywords = ["ai", "workflow", "agent", "hpc", "middleware"]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Operating System :: OS Independent",
]
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "openai>=1.0.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "google-genai>=0.3.0",
    "aiofiles>=23.0.0",
    "python-json-logger>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "docformatter>=0.1.7",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "tox>=4.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/stride-research/AgnosticAgent"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"] 

[tool.setuptools.package-data]
agnostic_agent = ["config/config.yaml"]

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["agentic_ai_framework"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
