src/agentic_ai/__init__.py:3:26: F401 `.open_router.AIAgent` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | """Top-level imports."""
2 | from .utils import Logger
3 | from .open_router import AIAgent, ToolkitBase
  |                          ^^^^^^^ F401
4 |
5 | logger_instance = Logger(colorful_output=True) # Initiating logger
  |
  = help: Use an explicit re-export: `AIAgent as AIAgent`

src/agentic_ai/__init__.py:3:35: F401 `.open_router.ToolkitBase` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | """Top-level imports."""
2 | from .utils import Logger
3 | from .open_router import AIAgent, ToolkitBase
  |                                   ^^^^^^^^^^^ F401
4 |
5 | logger_instance = Logger(colorful_output=True) # Initiating logger
  |
  = help: Use an explicit re-export: `ToolkitBase as ToolkitBase`

src/agentic_ai/open_router.py:1:1: D100 Missing docstring in public module
src/agentic_ai/open_router.py:28:89: E501 Line too long (131 > 88)
   |
26 | …
27 | …
28 | …iately call the tool without any conversational filler or "thinking out loud" text.**
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
29 | …d all necessary information from tool calls to answer the user's request, provide the final answer directly.
30 | … clear, ask for clarifications.
   |

src/agentic_ai/open_router.py:29:89: E501 Line too long (154 > 88)
   |
27 | …
28 | … the tool without any conversational filler or "thinking out loud" text.**
29 | …sary information from tool calls to answer the user's request, provide the final answer directly.
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
30 | … for clarifications.
31 | … access to it, you have to sttop and specify that you need it.
   |

src/agentic_ai/open_router.py:31:89: E501 Line too long (119 > 88)
   |
29 | …     - If you have successfully gathered all necessary information from tool calls to answer the user's request, provide the final an…
30 | …     - If something is not sufficiently clear, ask for clarifications.
31 | …     - If you are needing a tool but you dont have access to it, you have to sttop and specify that you need it.
   |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
32 | …     - If there is any logical error in the request, express it, then stop.
33 | …     """
   |

src/agentic_ai/open_router.py:38:89: E501 Line too long (89 > 88)
   |
36 |     """An agent class adapted for the OpenAI SDK, compatible with OpenRouter.
37 |
38 |     This class handles system instructions, structured JSON output, and function calling.
   |                                                                                         ^ E501
39 |
40 |     Attributes:
   |

src/agentic_ai/open_router.py:48:89: E501 Line too long (113 > 88)
   |
46 |         model_name (str): LLM model to be used.
47 |         sys_instruction (str): Extra dev instructions to add to the LLM.
48 |         response_schema (Type[BaseModel]): Pydantic models for structured output from the model's final response.
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
49 |         settings (dict): Extra settings for the model's completion method (e.g., temperature, max_tokens).
50 |         tools_to_use (dict): Filtered tools to use for the given class instance.
   |

src/agentic_ai/open_router.py:49:89: E501 Line too long (106 > 88)
   |
47 |         sys_instruction (str): Extra dev instructions to add to the LLM.
48 |         response_schema (Type[BaseModel]): Pydantic models for structured output from the model's final response.
49 |         settings (dict): Extra settings for the model's completion method (e.g., temperature, max_tokens).
   |                                                                                         ^^^^^^^^^^^^^^^^^^ E501
50 |         tools_to_use (dict): Filtered tools to use for the given class instance.
51 |         toolkit (FunctionalToolkit): Instance of FunctionalToolkit with filtered tools.
   |

src/agentic_ai/open_router.py:67:89: E501 Line too long (106 > 88)
   |
65 |                  response_schema: Optional[Type[BaseModel]] = None,
66 |                  tools: Optional[List[str]] = [],
67 |                  extra_response_settings: Optional[Type[ExtraResponseSettings]] = ExtraResponseSettings(),
   |                                                                                         ^^^^^^^^^^^^^^^^^^ E501
68 |                  ) -> None:
69 |         """Initializes the agent for use with OpenRouter.
   |

src/agentic_ai/open_router.py:73:89: E501 Line too long (102 > 88)
   |
71 |         Args:
72 |             agent_name (str): A name for the agent for logging purposes.
73 |             model_name (str, optional): The LLM model to use. Defaults to "anthropic/claude-sonnet-4".
   |                                                                                         ^^^^^^^^^^^^^^ E501
74 |             sys_instructions (str, optional): The system prompt for the model. Defaults to None.
75 |             response_schema (Type[BaseModel], optional): A Pydantic model to structure the LLM's JSON output. Defaults to None.
   |

src/agentic_ai/open_router.py:74:89: E501 Line too long (96 > 88)
   |
72 |             agent_name (str): A name for the agent for logging purposes.
73 |             model_name (str, optional): The LLM model to use. Defaults to "anthropic/claude-sonnet-4".
74 |             sys_instructions (str, optional): The system prompt for the model. Defaults to None.
   |                                                                                         ^^^^^^^^ E501
75 |             response_schema (Type[BaseModel], optional): A Pydantic model to structure the LLM's JSON output. Defaults to None.
76 |             tools (List[str], optional): A list of tool names to use. Defaults to [].
   |

src/agentic_ai/open_router.py:75:89: E501 Line too long (127 > 88)
   |
73 | …     model_name (str, optional): The LLM model to use. Defaults to "anthropic/claude-sonnet-4".
74 | …     sys_instructions (str, optional): The system prompt for the model. Defaults to None.
75 | …     response_schema (Type[BaseModel], optional): A Pydantic model to structure the LLM's JSON output. Defaults to None.
   |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
76 | …     tools (List[str], optional): A list of tool names to use. Defaults to [].
77 | …     extra_response_settings (Type[ExtraResponseSettings], optional): Additional parameters for the OpenAI API call (e.g., temperatur…
   |

src/agentic_ai/open_router.py:77:89: E501 Line too long (192 > 88)
   |
75 | … structure the LLM's JSON output. Defaults to None.
76 | …ts to [].
77 | … Additional parameters for the OpenAI API call (e.g., temperature, max_tokens). Defaults to ExtraResponseSettings().
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
78 | …
79 | …
   |

src/agentic_ai/open_router.py:80:89: E501 Line too long (92 > 88)
   |
79 |         Raises:
80 |             ValueError: If the OpenRouter API key is not found in the environment variables.
   |                                                                                         ^^^^ E501
81 |         """
82 |         api_key = os.getenv("OPEN_ROUTER_API_KEY")
   |

src/agentic_ai/open_router.py:84:89: E501 Line too long (111 > 88)
   |
82 |         api_key = os.getenv("OPEN_ROUTER_API_KEY")
83 |         if not api_key:
84 |             raise ValueError("Couldn't find OpenRouter's API key in OPEN_ROUTER_API_KEY environment variable.")
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^ E501
85 |         
86 |         self.client = AsyncOpenAI(
   |

src/agentic_ai/open_router.py:98:89: E501 Line too long (93 > 88)
   |
96 |         self.toolkit = FunctionalToolkit(self.tools_to_use)   
97 |     
98 |     def _set_up_toolkit(self, tools: Optional[List[Callable]] = None) -> dict[str, ToolSpec]:
   |                                                                                         ^^^^^ E501
99 |         """Sets up the toolkit by filtering the global tool registry for the specified tools.
   |

src/agentic_ai/open_router.py:99:89: E501 Line too long (93 > 88)
    |
 98 |     def _set_up_toolkit(self, tools: Optional[List[Callable]] = None) -> dict[str, ToolSpec]:
 99 |         """Sets up the toolkit by filtering the global tool registry for the specified tools.
    |                                                                                         ^^^^^ E501
100 |
101 |         Args:
    |

src/agentic_ai/open_router.py:102:89: E501 Line too long (89 > 88)
    |
101 |         Args:
102 |             tools (List[str], optional): List of tool names to include. Defaults to None.
    |                                                                                         ^ E501
103 |
104 |         Returns:
    |

src/agentic_ai/open_router.py:112:89: E501 Line too long (138 > 88)
    |
110 | …registry[tool_name]
111 | …
112 | …e}' was requested for agent '{self.agent_name}' but not found in global tool_registry.")
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
113 | …
    |

src/agentic_ai/open_router.py:116:89: E501 Line too long (113 > 88)
    |
115 |     def _set_up_settings(self, extra_response_settings: ExtraResponseSettings) -> Dict:
116 |         """Sets up the settings for the model completion call, including response format if a schema is provided.
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
117 |
118 |         Args:
    |

src/agentic_ai/open_router.py:119:89: E501 Line too long (106 > 88)
    |
118 |         Args:
119 |             extra_response_settings (ExtraResponseSettings): Additional settings for the model completion.
    |                                                                                         ^^^^^^^^^^^^^^^^^^ E501
120 |
121 |         Returns:
    |

src/agentic_ai/open_router.py:138:89: E501 Line too long (97 > 88)
    |
136 |         return params
137 |
138 |     def _extract_structure(self, file_extension:str, base_64_string: str, file_path:str) -> Dict:
    |                                                                                         ^^^^^^^^^ E501
139 |         """Extracts the structure for file or image input to be sent to the OpenRouter API.
    |

src/agentic_ai/open_router.py:139:89: E501 Line too long (91 > 88)
    |
138 |     def _extract_structure(self, file_extension:str, base_64_string: str, file_path:str) -> Dict:
139 |         """Extracts the structure for file or image input to be sent to the OpenRouter API.
    |                                                                                         ^^^ E501
140 |
141 |         Args:
    |

src/agentic_ai/open_router.py:151:89: E501 Line too long (153 > 88)
    |
149 | …webp']:
150 | …
151 | …e_extension == '.png' else 'image/jpeg' if file_extension in ['.jpg', '.jpeg'] else 'image/webp'
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
152 | …
153 | …
    |

src/agentic_ai/open_router.py:164:89: E501 Line too long (92 > 88)
    |
162 |                             "file": {
163 |                                 "filename": os.path.basename(file_path),
164 |                                 "file_data": f"data:application/pdf;base64,{base_64_string}"
    |                                                                                         ^^^^ E501
165 |                             }
166 |                         }
    |

src/agentic_ai/open_router.py:169:89: E501 Line too long (94 > 88)
    |
167 |         else:
168 |                         # Default to PDF format for unknown types
169 |                         logger.warning(f"Unknown file type {file_extension}, treating as PDF")
    |                                                                                         ^^^^^^ E501
170 |                         structure = {
171 |                             "type": "file",
    |

src/agentic_ai/open_router.py:174:89: E501 Line too long (92 > 88)
    |
172 |                             "file": {
173 |                                 "filename": os.path.basename(file_path),
174 |                                 "file_data": f"data:application/pdf;base64,{base_64_string}"
    |                                                                                         ^^^^ E501
175 |                             }
176 |                         }
    |

src/agentic_ai/open_router.py:224:89: E501 Line too long (118 > 88)
    |
222 |         async_tasks: List[Coroutine[Any, Any, Any]]
223 |     ) -> List[Dict[str, str]]:
224 |         """Extracts results from tool calls, both asynchronous and synchronous, and appends them to the messages list.
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
225 |
226 |         Args:
    |

src/agentic_ai/open_router.py:228:89: E501 Line too long (119 > 88)
    |
226 |         Args:
227 |             messages (List[Dict[str, str]]): The current list of messages.
228 |             tool_call_info_map (Dict[Any, Tuple[str, int]]): Mapping of tasks/futures to (function_name, tool_call_id).
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
229 |             sync_futures (List[concurrent.futures.Future]): List of synchronous futures.
230 |             async_tasks (List[Coroutine]): List of asynchronous tasks.
    |

src/agentic_ai/open_router.py:236:89: E501 Line too long (96 > 88)
    |
234 |         """
235 |         if async_tasks:
236 |                     completed_tasks = await asyncio.gather(*async_tasks, return_exceptions=True)
    |                                                                                         ^^^^^^^^ E501
237 |                     for i, result in enumerate(completed_tasks):
238 |                         original_task = async_tasks[i] # Get the original task
    |

src/agentic_ai/open_router.py:239:89: E501 Line too long (106 > 88)
    |
237 |                     for i, result in enumerate(completed_tasks):
238 |                         original_task = async_tasks[i] # Get the original task
239 |                         function_name_completed, original_tool_call_id = tool_call_info_map[original_task]
    |                                                                                         ^^^^^^^^^^^^^^^^^^ E501
240 |                         
241 |                         if isinstance(result, Exception):
    |

src/agentic_ai/open_router.py:242:88: E501 Line too long (108 > 88)
    |
241 |                         if isinstance(result, Exception):
242 |                             logger.error(f"(🔧) Async tool call {function_name_completed} failed: {result}")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
243 |                             content = f"Error: {str(result)}"
244 |                             raise result
    |

src/agentic_ai/open_router.py:246:88: E501 Line too long (117 > 88)
    |
244 |                             raise result
245 |                         else:
246 |                             logger.debug(f"(🔧) Completed async task: {function_name_completed} with data: {result}")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
247 |                             content = str(result)
    |

src/agentic_ai/open_router.py:259:89: E501 Line too long (99 > 88)
    |
257 |         if sync_futures:
258 |                     for future in concurrent.futures.as_completed(sync_futures):
259 |                         function_name_completed, original_tool_call_id = tool_call_info_map[future]
    |                                                                                         ^^^^^^^^^^^ E501
260 |                         try:
261 |                             output = future.result()
    |

src/agentic_ai/open_router.py:262:88: E501 Line too long (120 > 88)
    |
260 |                         try:
261 |                             output = future.result()
262 |                             logger.debug(f"(🔧) Completed sync future: {function_name_completed} with output: {output}")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
263 |                             content = str(output)
264 |                             messages.append({
    |

src/agentic_ai/open_router.py:268:89: E501 Line too long (114 > 88)
    |
266 |                                 "tool_call_id": original_tool_call_id,
267 |                                 "name": function_name_completed,
268 |                                 "output": json.dumps(output) if isinstance(output, (dict, list)) else str(output),
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
269 |                             })
270 |                         except Exception as exc:
    |

src/agentic_ai/open_router.py:271:88: E501 Line too long (104 > 88)
    |
269 |                             })
270 |                         except Exception as exc:
271 |                             logger.error(f"(🔧) Sync tool call {function_name_completed} failed: {exc}")
    |                                                                                         ^^^^^^^^^^^^^^^^ E501
272 |                             raise exc
273 |                             content = f"Error: {str(exc)}"
    |

src/agentic_ai/open_router.py:279:89: E501 Line too long (125 > 88)
    |
277 | …
278 | …
279 | …self, response: ChatCompletion, messages: List[dict[str, str]]) -> ChatCompletion:
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
280 | …observes if a tool call is requested, executes the tool call, feeds the output back to the model, and recursively continues if neede…
    |

src/agentic_ai/open_router.py:280:89: E501 Line too long (177 > 88)
    |
279 | …tion, messages: List[dict[str, str]]) -> ChatCompletion:
280 | … requested, executes the tool call, feeds the output back to the model, and recursively continues if needed.
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
281 | …
282 | …
    |

src/agentic_ai/open_router.py:287:89: E501 Line too long (89 > 88)
    |
286 | …     Returns:
287 | …         ChatCompletion: The final response object after all tool calls are completed.
    |                                                                                       ^ E501
288 | …     """
289 | …     messages.append(response.choices[0].message.dict()) # Adding to conversation context the tool call request . NOTE: All this muc…
    |

src/agentic_ai/open_router.py:289:89: E501 Line too long (194 > 88)
    |
287 | … completed.
288 | …
289 | …sation context the tool call request . NOTE: All this much context should probably not be included. To be researched
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
290 | …
291 | …
    |

src/agentic_ai/open_router.py:292:88: E501 Line too long (111 > 88)
    |
291 |         tool_calls = response.choices[0].message.tool_calls
292 |         logger.debug(f"(🔧) Tool calls ({len(tool_calls) if tool_calls else 0} tools requested): {tool_calls}")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^ E501
293 |
294 |         under_max_limit_of_interactions_reached = self.number_of_interactions < self.interactions_limit
    |

src/agentic_ai/open_router.py:294:89: E501 Line too long (103 > 88)
    |
292 |         logger.debug(f"(🔧) Tool calls ({len(tool_calls) if tool_calls else 0} tools requested): {tool_calls}")
293 |
294 |         under_max_limit_of_interactions_reached = self.number_of_interactions < self.interactions_limit
    |                                                                                         ^^^^^^^^^^^^^^^ E501
295 |         if tool_calls and under_max_limit_of_interactions_reached:
296 |             self.number_of_interactions += 1
    |

src/agentic_ai/open_router.py:307:89: E501 Line too long (94 > 88)
    |
305 |                         function_args = json.loads(tool_call.function.arguments)
306 |                         tool_call_id = tool_call.id
307 |                         logger.debug(f"Functions in toolkit looks like: {self.toolkit.funcs}")
    |                                                                                         ^^^^^^ E501
308 |
309 |                         procedure = self.toolkit.tools.get(function_name)
    |

src/agentic_ai/open_router.py:311:89: E501 Line too long (112 > 88)
    |
309 |                         procedure = self.toolkit.tools.get(function_name)
310 |                         if not procedure:
311 |                             logger.warning(f"Tool '{function_name}' requested by LLM but not found in toolkit.")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^ E501
312 |                             messages.append({
313 |                                 "tool_call_id": tool_call_id,
    |

src/agentic_ai/open_router.py:321:89: E501 Line too long (90 > 88)
    |
319 |                         executable_method = procedure.get_executable()
320 |                         if procedure.is_coroutine:
321 |                             task = asyncio.create_task(executable_method(**function_args))
    |                                                                                         ^^ E501
322 |                             async_tasks.append(task)
323 |                             tool_call_info_map[task] = (function_name, tool_call_id)
    |

src/agentic_ai/open_router.py:329:89: E501 Line too long (98 > 88)
    |
327 |                             tool_call_info_map[future] = (function_name, tool_call.id)
328 |                         
329 |                 messages_with_tool_results = await self._extract_results_tools(messages=messages, 
    |                                                                                         ^^^^^^^^^^ E501
330 |                                                                               tool_call_info_map=tool_call_info_map,
331 |                                                                               sync_futures=sync_futures, 
    |

src/agentic_ai/open_router.py:335:89: E501 Line too long (114 > 88)
    |
333 |                 response = await self._generate_completition(
334 |                                                         messages=messages_with_tool_results,
335 |                                                         tools=self.toolkit.schematize() if self.toolkit else None,
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
336 |                                                         )
337 |                 self._log_response(response)
    |

src/agentic_ai/open_router.py:338:89: E501 Line too long (100 > 88)
    |
336 |                                                         )
337 |                 self._log_response(response)
338 |                 return await self._complete_tool_calling_cycle(response=response, messages=messages)
    |                                                                                         ^^^^^^^^^^^^ E501
339 |         else:
340 |             if not under_max_limit_of_interactions_reached:
    |

src/agentic_ai/open_router.py:341:89: E501 Line too long (141 > 88)
    |
339 | …
340 | …reached:
341 | …ng cycle prematurely after reaching {self.number_of_interactions} number of interactions")
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
342 | …
    |

src/agentic_ai/open_router.py:344:44: ANN001 Missing type annotation for function argument `messages`
    |
342 |             return response
343 |  
344 |     async def _generate_completition(self, messages, tools: Optional[Any] = None) -> ChatCompletion:
    |                                            ^^^^^^^^ ANN001
345 |         """Generates a model completion using the provided messages and tools.
    |

src/agentic_ai/open_router.py:344:61: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `tools`
    |
342 |             return response
343 |  
344 |     async def _generate_completition(self, messages, tools: Optional[Any] = None) -> ChatCompletion:
    |                                                             ^^^^^^^^^^^^^ ANN401
345 |         """Generates a model completion using the provided messages and tools.
    |

src/agentic_ai/open_router.py:344:89: E501 Line too long (100 > 88)
    |
342 |             return response
343 |  
344 |     async def _generate_completition(self, messages, tools: Optional[Any] = None) -> ChatCompletion:
    |                                                                                         ^^^^^^^^^^^^ E501
345 |         """Generates a model completion using the provided messages and tools.
    |

src/agentic_ai/open_router.py:370:89: E501 Line too long (94 > 88)
    |
368 |         usage = getattr(response, 'usage', None)
369 |         if usage:
370 |             self.cumulative_token_usage['prompt_tokens'] += getattr(usage, 'prompt_tokens', 0)
    |                                                                                         ^^^^^^ E501
371 |             self.cumulative_token_usage['completion_tokens'] += getattr(usage, 'completion_tokens', 0)
372 |             self.cumulative_token_usage['total_tokens'] += getattr(usage, 'total_tokens', 0)
    |

src/agentic_ai/open_router.py:371:89: E501 Line too long (102 > 88)
    |
369 |         if usage:
370 |             self.cumulative_token_usage['prompt_tokens'] += getattr(usage, 'prompt_tokens', 0)
371 |             self.cumulative_token_usage['completion_tokens'] += getattr(usage, 'completion_tokens', 0)
    |                                                                                         ^^^^^^^^^^^^^^ E501
372 |             self.cumulative_token_usage['total_tokens'] += getattr(usage, 'total_tokens', 0)
    |

src/agentic_ai/open_router.py:372:89: E501 Line too long (92 > 88)
    |
370 |             self.cumulative_token_usage['prompt_tokens'] += getattr(usage, 'prompt_tokens', 0)
371 |             self.cumulative_token_usage['completion_tokens'] += getattr(usage, 'completion_tokens', 0)
372 |             self.cumulative_token_usage['total_tokens'] += getattr(usage, 'total_tokens', 0)
    |                                                                                         ^^^^ E501
373 |     
374 |     def _log_response(self, response: ChatCompletion) -> None:
    |

src/agentic_ai/open_router.py:390:89: E501 Line too long (94 > 88)
    |
389 |     def _summary_log(self, starting_time: int) -> None:
390 |         """Logs a summary of cumulative token usage, number of interactions, and elapsed time.
    |                                                                                         ^^^^^^ E501
391 |
392 |         Args:
    |

src/agentic_ai/open_router.py:395:88: E501 Line too long (222 > 88)
    |
393 | …
394 | …
395 | …ge['prompt_tokens']}, completion={self.cumulative_token_usage['completion_tokens']}, total={self.cumulative_token_usage['total_tokens']}")
    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
396 | …nction calling")
397 | …
    |

src/agentic_ai/open_router.py:396:90: E501 Line too long (98 > 88)
    |
394 | …     """
395 | …     logger.info(f"(💰) Cumulative token usage: prompt={self.cumulative_token_usage['prompt_tokens']}, completion={self.cumulative_to…
396 | …     logger.info(f"(🛠️) {self.number_of_interactions} interactions occured in function calling")
    |                                                                                       ^^^^^^^^^^ E501
397 | …     if self.number_of_interactions == 0 and self.tools_to_use:
398 | …          logger.warning("The LLM hasnt invoked any function/tool, even tho u passed some tool definitions")
    |

src/agentic_ai/open_router.py:398:89: E501 Line too long (111 > 88)
    |
396 |         logger.info(f"(🛠️) {self.number_of_interactions} interactions occured in function calling")
397 |         if self.number_of_interactions == 0 and self.tools_to_use:
398 |              logger.warning("The LLM hasnt invoked any function/tool, even tho u passed some tool definitions")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^ E501
399 |         logger.info(f"(⏱️) Took {round(time.time() - starting_time,2)} seconds to fullfill the given prompt")
    |

src/agentic_ai/open_router.py:399:90: E501 Line too long (108 > 88)
    |
397 |         if self.number_of_interactions == 0 and self.tools_to_use:
398 |              logger.warning("The LLM hasnt invoked any function/tool, even tho u passed some tool definitions")
399 |         logger.info(f"(⏱️) Took {round(time.time() - starting_time,2)} seconds to fullfill the given prompt")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
400 |
401 |     async def _generate_completition(self, messages: List[Dict], tools: Optional[Any] = None) -> ChatCompletion:
    |

src/agentic_ai/open_router.py:401:73: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `tools`
    |
399 |         logger.info(f"(⏱️) Took {round(time.time() - starting_time,2)} seconds to fullfill the given prompt")
400 |
401 |     async def _generate_completition(self, messages: List[Dict], tools: Optional[Any] = None) -> ChatCompletion:
    |                                                                         ^^^^^^^^^^^^^ ANN401
402 |         """Generates a model completion using the provided messages and tools. (Duplicate method, see above.)
    |

src/agentic_ai/open_router.py:401:89: E501 Line too long (112 > 88)
    |
399 |         logger.info(f"(⏱️) Took {round(time.time() - starting_time,2)} seconds to fullfill the given prompt")
400 |
401 |     async def _generate_completition(self, messages: List[Dict], tools: Optional[Any] = None) -> ChatCompletion:
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^ E501
402 |         """Generates a model completion using the provided messages and tools. (Duplicate method, see above.)
    |

src/agentic_ai/open_router.py:402:9: D415 First line should end with a period, question mark, or exclamation point
    |
401 |       async def _generate_completition(self, messages: List[Dict], tools: Optional[Any] = None) -> ChatCompletion:
402 | /         """Generates a model completion using the provided messages and tools. (Duplicate method, see above.)
403 | |
404 | |         Args:
405 | |             messages (list): The conversation messages.
406 | |             tools (Any, optional): The tools to provide to the model. Defaults to None.
407 | |
408 | |         Returns:
409 | |             ChatCompletion: The model's response.
410 | |         """
    | |___________^ D415
411 |           logger.debug(f"Adding the following settings: {self.settings}")
412 |           logger.debug(f"Message is: {messages}")
    |
    = help: Add closing punctuation

src/agentic_ai/open_router.py:402:89: E501 Line too long (109 > 88)
    |
401 |     async def _generate_completition(self, messages: List[Dict], tools: Optional[Any] = None) -> ChatCompletion:
402 |         """Generates a model completion using the provided messages and tools. (Duplicate method, see above.)
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^ E501
403 |
404 |         Args:
    |

src/agentic_ai/open_router.py:422:89: E501 Line too long (99 > 88)
    |
421 |     def _process_response(self, response: ChatCompletion) -> LLMResponse:
422 |         """Processes the final ChatCompletion object to extract relevant data and log interactions.
    |                                                                                         ^^^^^^^^^^^ E501
423 |
424 |         Args:
    |

src/agentic_ai/open_router.py:428:89: E501 Line too long (90 > 88)
    |
427 |         Returns:
428 |             LLMResponse: The processed response containing the final and parsed responses.
    |                                                                                         ^^ E501
429 |         """
430 |         logger.debug(f"Response is: {response}")
    |

src/agentic_ai/open_router.py:447:89: E501 Line too long (118 > 88)
    |
445 |                    files_path: Optional[List[str]] = None,
446 |                    n_of_attempts: Optional[int] = 2) -> LLMResponse:
447 |         """Sends a prompt to the LLM, handles multimodal content and function calling, and returns the final response.
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
448 |
449 |         Args:
    |

src/agentic_ai/open_router.py:451:89: E501 Line too long (94 > 88)
    |
449 |         Args:
450 |             message (str): The user prompt to send to the LLM.
451 |             files_path (List[str], optional): List of file paths to include. Defaults to None.
    |                                                                                         ^^^^^^ E501
452 |             n_of_attempts (int, optional): Number of attempts to try the prompt. Defaults to 2.
    |

src/agentic_ai/open_router.py:452:89: E501 Line too long (95 > 88)
    |
450 |             message (str): The user prompt to send to the LLM.
451 |             files_path (List[str], optional): List of file paths to include. Defaults to None.
452 |             n_of_attempts (int, optional): Number of attempts to try the prompt. Defaults to 2.
    |                                                                                         ^^^^^^^ E501
453 |
454 |         Returns:
    |

src/agentic_ai/open_router.py:462:89: E501 Line too long (127 > 88)
    |
460 |         for attempt_number in range(1, n_of_attempts+1):
461 |             try: 
462 |                 with add_context_to_log(agent_name=self.agent_name, model_name=self.model_name, prompt_attempt=attempt_number):
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
463 |                         starting_time = time.time()
464 |                         self.number_of_interactions = 0
    |

src/agentic_ai/open_router.py:465:57: SyntaxError: Cannot reuse outer quote character in f-strings on Python 3.8 (syntax was added in Python 3.12)
    |
463 | …     starting_time = time.time()
464 | …     self.number_of_interactions = 0
465 | …     logger.info(f"Starting prompt. {"Files included" if files_path else "No files included."} with model {self.model_name}")
    |                                       ^
466 | …     messages = []    
467 | …     user_content = [{"type": "text", "text": message}]
    |

src/agentic_ai/open_router.py:465:89: E501 Line too long (144 > 88)
    |
463 | …
464 | … 0
465 | …. {"Files included" if files_path else "No files included."} with model {self.model_name}")
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
466 | …
467 | …t", "text": message}]
    |

src/agentic_ai/open_router.py:469:89: E501 Line too long (95 > 88)
    |
467 |                         user_content = [{"type": "text", "text": message}]
468 |                         if files_path:
469 |                             processed_files = await self._process_files(files_paths=files_path)
    |                                                                                         ^^^^^^^ E501
470 |                             user_content.extend(processed_files)
    |

src/agentic_ai/open_router.py:472:89: E501 Line too long (106 > 88)
    |
470 |                             user_content.extend(processed_files)
471 |                         
472 |                         # Appending context (user message, developer instructions (fixed + user-provided))
    |                                                                                         ^^^^^^^^^^^^^^^^^^ E501
473 |                         if self.sys_instructions: 
474 |                             messages.append({"role": "developer", "content": self.sys_instructions})
    |

src/agentic_ai/open_router.py:474:89: E501 Line too long (100 > 88)
    |
472 |                         # Appending context (user message, developer instructions (fixed + user-provided))
473 |                         if self.sys_instructions: 
474 |                             messages.append({"role": "developer", "content": self.sys_instructions})
    |                                                                                         ^^^^^^^^^^^^ E501
475 |                         messages.append({"role": "user", "content": user_content})
476 |                         messages.append({"role": "developer", "content": DEV_INSTRUCTIONS})
    |

src/agentic_ai/open_router.py:476:89: E501 Line too long (91 > 88)
    |
474 |                             messages.append({"role": "developer", "content": self.sys_instructions})
475 |                         messages.append({"role": "user", "content": user_content})
476 |                         messages.append({"role": "developer", "content": DEV_INSTRUCTIONS})
    |                                                                                         ^^^ E501
477 |                         
478 |                         response = await self._generate_completition(
    |

src/agentic_ai/open_router.py:488:89: E501 Line too long (116 > 88)
    |
486 |                         # Calling tools if needed
487 |                         if response.choices[0].message.tool_calls:
488 |                             response = await self._complete_tool_calling_cycle(response=response, messages=messages)
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
489 |
490 |                         # Loggin final metrics
    |

src/agentic_ai/open_router.py:493:89: E501 Line too long (100 > 88)
    |
491 |                         self._summary_log(starting_time=starting_time)
492 |                         processed_response =  self._process_response(response)
493 |                         logger.debug(f"Final text response is: {processed_response.final_response}")
    |                                                                                         ^^^^^^^^^^^^ E501
494 |                         logger.debug(f"Final parsed response is: {processed_response.parsed_response}")
495 |                         return processed_response
    |

src/agentic_ai/open_router.py:494:89: E501 Line too long (103 > 88)
    |
492 |                         processed_response =  self._process_response(response)
493 |                         logger.debug(f"Final text response is: {processed_response.final_response}")
494 |                         logger.debug(f"Final parsed response is: {processed_response.parsed_response}")
    |                                                                                         ^^^^^^^^^^^^^^^ E501
495 |                         return processed_response
496 |             except Exception as e:
    |

src/agentic_ai/open_router.py:502:5: D200 One-line docstring should fit on one line
    |
501 |   class ToolkitBase():
502 | /     """Base class for toolkits. Provides utility to extract tool names from the class.
503 | |     """
    | |_______^ D200
504 |       def extract_tools_names(self) -> List[str]:
505 |           """Extracts the names of all callable tools defined in the class.
    |
    = help: Reformat to one line

src/agentic_ai/open_router.py:512:89: E501 Line too long (122 > 88)
    |
510 |         tool_names = []
511 |         for name, attr in self.__class__.__dict__.items():
512 |             if callable(attr) and inspect.isfunction(attr) and not name.startswith("_") and name != "extract_tools_names":
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
513 |                tool_names.append(name)
514 |         logger.debug(f"For {self.__class__} toolkit class, the following tools have been registered: {tool_names}")
    |

src/agentic_ai/open_router.py:514:89: E501 Line too long (115 > 88)
    |
512 |             if callable(attr) and inspect.isfunction(attr) and not name.startswith("_") and name != "extract_tools_names":
513 |                tool_names.append(name)
514 |         logger.debug(f"For {self.__class__} toolkit class, the following tools have been registered: {tool_names}")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
515 |         return tool_names
    |

src/agentic_ai/scripts/google_files.py:1:1: D100 Missing docstring in public module
src/agentic_ai/scripts/google_files.py:14:10: E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
   |
12 | if len(sys.argv) > 1:
13 |       delete_files = eval(sys.argv[1])
14 |       if type(delete_files) != bool:
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ E721
15 |             raise ValueError("First argument should be boolean")
16 | print(f"Delete files takes on: {delete_files}")
   |

src/agentic_ai/utils/__init__.py:1:1: D104 Missing docstring in public package
src/agentic_ai/utils/__init__.py:1:21: F401 `.logger.Logger` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .logger import Logger, add_context_to_log
  |                     ^^^^^^ F401
2 | from .core import tool, tool_registry, ExtraResponseSettings
  |
  = help: Use an explicit re-export: `Logger as Logger`

src/agentic_ai/utils/__init__.py:1:29: F401 `.logger.add_context_to_log` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .logger import Logger, add_context_to_log
  |                             ^^^^^^^^^^^^^^^^^^ F401
2 | from .core import tool, tool_registry, ExtraResponseSettings
  |
  = help: Use an explicit re-export: `add_context_to_log as add_context_to_log`

src/agentic_ai/utils/__init__.py:2:19: F401 `.core.tool` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .logger import Logger, add_context_to_log
2 | from .core import tool, tool_registry, ExtraResponseSettings
  |                   ^^^^ F401
  |
  = help: Use an explicit re-export: `tool as tool`

src/agentic_ai/utils/__init__.py:2:25: F401 `.core.tool_registry` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .logger import Logger, add_context_to_log
2 | from .core import tool, tool_registry, ExtraResponseSettings
  |                         ^^^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `tool_registry as tool_registry`

src/agentic_ai/utils/__init__.py:2:40: F401 `.core.ExtraResponseSettings` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .logger import Logger, add_context_to_log
2 | from .core import tool, tool_registry, ExtraResponseSettings
  |                                        ^^^^^^^^^^^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `ExtraResponseSettings as ExtraResponseSettings`

src/agentic_ai/utils/core/__init__.py:1:1: D104 Missing docstring in public package
src/agentic_ai/utils/core/__init__.py:2:31: F401 `.function_calling.tool_registry` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
2 | from .function_calling import tool_registry, tool
  |                               ^^^^^^^^^^^^^ F401
3 | from .schemas import ExtraResponseSettings
  |
  = help: Use an explicit re-export: `tool_registry as tool_registry`

src/agentic_ai/utils/core/__init__.py:2:46: F401 `.function_calling.tool` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
2 | from .function_calling import tool_registry, tool
  |                                              ^^^^ F401
3 | from .schemas import ExtraResponseSettings
  |
  = help: Use an explicit re-export: `tool as tool`

src/agentic_ai/utils/core/__init__.py:3:22: F401 `.schemas.ExtraResponseSettings` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
2 | from .function_calling import tool_registry, tool
3 | from .schemas import ExtraResponseSettings
  |                      ^^^^^^^^^^^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `ExtraResponseSettings as ExtraResponseSettings`

src/agentic_ai/utils/core/function_calling.py:1:1: D100 Missing docstring in public module
src/agentic_ai/utils/core/function_calling.py:11:5: D415 First line should end with a period, question mark, or exclamation point
   |
10 |   class RegisteredTool():
11 | /     """Represented a registered tool inside the toolkit
12 | |
13 | |     Attributes:
14 | |         func: the callable method
15 | |         func_schema: pydantic schema defining the arguments
16 | |         name: name of the callable method
17 | |         description: docstring of the method
18 | |         is_coroutine: defines if the given callable is async or not
19 | |         parameters_schema: extract the json schema out of the Pydantic model
20 | |     
21 | |     """
   | |_______^ D415
22 |       def __init__(self, function_as_tool: ToolSpec) -> None:
23 |           """Initializes the instances with the function being passed.
   |
   = help: Add closing punctuation

src/agentic_ai/utils/core/function_calling.py:26:89: E501 Line too long (91 > 88)
   |
25 |         Args:
26 |             function_as_tool: contains function callable + metadata (is_coroutine & schema)
   |                                                                                         ^^^ E501
27 |         """
28 |         self.func = function_as_tool.func
   |

src/agentic_ai/utils/core/function_calling.py:31:89: E501 Line too long (129 > 88)
   |
29 |         self.func_schema = function_as_tool.func_schema
30 |         self.name = function_as_tool.func.__name__
31 |         self.description = function_as_tool.func.__doc__.strip() if function_as_tool.func.__doc__ else "No description provided."
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
32 |         self.is_coroutine = function_as_tool.is_coroutine
33 |         self.parameters_schema = self.func_schema.model_json_schema()
   |

src/agentic_ai/utils/core/function_calling.py:36:10: D415 First line should end with a period, question mark, or exclamation point
   |
35 |       def schematize(self) -> Dict:
36 | /          """Automatically fills in the expected schema for OpenAI tool calling
37 | |
38 | |          Args:
39 | |             None
40 | |          
41 | |          Returns:
42 | |             A dic mapping a function callable to its name, description and paramteres schema
43 | |          """
   | |____________^ D415
44 |            return {
45 |                 "type": "function",
   |
   = help: Add closing punctuation

src/agentic_ai/utils/core/function_calling.py:42:89: E501 Line too long (92 > 88)
   |
41 |          Returns:
42 |             A dic mapping a function callable to its name, description and paramteres schema
   |                                                                                         ^^^^ E501
43 |          """
44 |          return {
   |

src/agentic_ai/utils/core/function_calling.py:49:89: E501 Line too long (100 > 88)
   |
47 |                 "name": self.name,
48 |                 "description": self.description,
49 |                 "parameters": self.parameters_schema # contains args type, descriptions and defaults
   |                                                                                         ^^^^^^^^^^^^ E501
50 |               }
51 |          }
   |

src/agentic_ai/utils/core/function_calling.py:53:29: ANN003 Missing type annotation for `**kwargs`
   |
51 |          }
52 |     
53 |     def _execute_sync(self, **kwargs) -> Any:
   |                             ^^^^^^^^ ANN003
54 |         """Executes a given method in synchronous manner.
   |

src/agentic_ai/utils/core/function_calling.py:53:42: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_execute_sync`
   |
51 |          }
52 |     
53 |     def _execute_sync(self, **kwargs) -> Any:
   |                                          ^^^ ANN401
54 |         """Executes a given method in synchronous manner.
   |

src/agentic_ai/utils/core/function_calling.py:56:89: E501 Line too long (92 > 88)
   |
54 |         """Executes a given method in synchronous manner.
55 |
56 |         Validates passed kwargs, calls the function with provided params and returns result.
   |                                                                                         ^^^^ E501
57 |
58 |         Returns:
   |

src/agentic_ai/utils/core/function_calling.py:69:89: E501 Line too long (107 > 88)
   |
67 |             return result
68 |         except Exception as e:
69 |             logger.error(f"Error executing SYNC tool '{self.name}' with args {kwargs}: {e}", exc_info=True)
   |                                                                                         ^^^^^^^^^^^^^^^^^^^ E501
70 |             raise 
   |

src/agentic_ai/utils/core/function_calling.py:72:36: ANN003 Missing type annotation for `**kwargs`
   |
70 |             raise 
71 |
72 |     async def _execute_async(self, **kwargs) -> Any:
   |                                    ^^^^^^^^ ANN003
73 |         """Executes a given method in an asynchronous manner.
   |

src/agentic_ai/utils/core/function_calling.py:72:49: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_execute_async`
   |
70 |             raise 
71 |
72 |     async def _execute_async(self, **kwargs) -> Any:
   |                                                 ^^^ ANN401
73 |         """Executes a given method in an asynchronous manner.
   |

src/agentic_ai/utils/core/function_calling.py:75:89: E501 Line too long (92 > 88)
   |
73 |         """Executes a given method in an asynchronous manner.
74 |
75 |         Validates passed kwargs, calls the function with provided params and returns result.
   |                                                                                         ^^^^ E501
76 |
77 |         Raises:
   |

src/agentic_ai/utils/core/function_calling.py:85:89: E501 Line too long (108 > 88)
   |
83 |             return result
84 |         except Exception as e:
85 |             logger.error(f"Error executing ASYNC tool '{self.name}' with args {kwargs}: {e}", exc_info=True)
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
86 |             raise 
   |

src/agentic_ai/utils/core/function_calling.py:89:9: D205 1 blank line required between summary line and description
   |
88 |       def get_executable(self) -> None:
89 | /         """Returns the appropriate executable method based on whether the wrapped function is a coroutine.
90 | |         Servers as router for calling the proper execution procedures adjusting automatically for coroutine 
91 | |         to normal functions.
92 | |         """
   | |___________^ D205
93 |           if self.is_coroutine:
94 |               return self._execute_async
   |
   = help: Insert single blank line

src/agentic_ai/utils/core/function_calling.py:89:89: E501 Line too long (106 > 88)
   |
88 |     def get_executable(self) -> None:
89 |         """Returns the appropriate executable method based on whether the wrapped function is a coroutine.
   |                                                                                         ^^^^^^^^^^^^^^^^^^ E501
90 |         Servers as router for calling the proper execution procedures adjusting automatically for coroutine 
91 |         to normal functions.
   |

src/agentic_ai/utils/core/function_calling.py:90:89: E501 Line too long (108 > 88)
   |
88 |     def get_executable(self) -> None:
89 |         """Returns the appropriate executable method based on whether the wrapped function is a coroutine.
90 |         Servers as router for calling the proper execution procedures adjusting automatically for coroutine 
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
91 |         to normal functions.
92 |         """
   |

src/agentic_ai/utils/core/function_calling.py:106:89: E501 Line too long (105 > 88)
    |
104 |         funcs: passed dictionary of callables with name as key and ToolSpec as value
105 |         tools: registered tools dict (transformed funcs input)
106 |         _tools_schema_cache: rstores schema of a given tool for the times its being called to schematize 
    |                                                                                         ^^^^^^^^^^^^^^^^^ E501
107 |         more than once for the same instance
    |

src/agentic_ai/utils/core/function_calling.py:111:9: D415 First line should end with a period, question mark, or exclamation point
    |
109 |       """
110 |       def __init__(self, funcs: Dict[str, Type[ToolSpec]]) -> None:
111 | /         """Initializes instances with funcs dictionary
112 | |
113 | |         Args:
114 | |             funcs: passed dictionary of callables with name as key and ToolSpec as value
115 | |         """
    | |___________^ D415
116 |           self.funcs = funcs
117 |           self.tools: Dict[str, RegisteredTool] = self.__set_up_tools()
    |
    = help: Add closing punctuation

src/agentic_ai/utils/core/function_calling.py:121:89: E501 Line too long (89 > 88)
    |
120 |         if not self.funcs:
121 |             logger.info("No functions for the toolkit have been provided (tool calling)")
    |                                                                                         ^ E501
122 |         else:
123 |             logger.info(f"Provided functions for the toolkit (tool calling) are: {list(self.funcs.keys())}")
    |

src/agentic_ai/utils/core/function_calling.py:123:89: E501 Line too long (108 > 88)
    |
121 |             logger.info("No functions for the toolkit have been provided (tool calling)")
122 |         else:
123 |             logger.info(f"Provided functions for the toolkit (tool calling) are: {list(self.funcs.keys())}")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
124 |
125 |     def __set_up_tools(self) -> Dict[str, RegisteredTool]:
    |

src/agentic_ai/utils/core/function_calling.py:148:5: ANN201 Missing return type annotation for public function `tool`
    |
147 | tool_registry: Dict[str, ToolSpec] = {}
148 | def tool(schema):
    |     ^^^^ ANN201
149 |     """Decorator that write tos a variable for registering methods automatically.
    |
    = help: Add return type annotation

src/agentic_ai/utils/core/function_calling.py:148:10: ANN001 Missing type annotation for function argument `schema`
    |
147 | tool_registry: Dict[str, ToolSpec] = {}
148 | def tool(schema):
    |          ^^^^^^ ANN001
149 |     """Decorator that write tos a variable for registering methods automatically.
    |

src/agentic_ai/utils/core/function_calling.py:154:9: ANN202 Missing return type annotation for private function `decorator`
    |
152 |         schema: Pydantic model defining args with datatype, default and descriptions
153 |     """
154 |     def decorator(func: callable):
    |         ^^^^^^^^^ ANN202
155 |         is_coroutine = inspect.iscoroutinefunction(func)
156 |         tool_registry[func.__name__] = ToolSpec(func=func, func_schema=schema, is_coroutine=is_coroutine)
    |
    = help: Add return type annotation

src/agentic_ai/utils/core/function_calling.py:156:89: E501 Line too long (105 > 88)
    |
154 |     def decorator(func: callable):
155 |         is_coroutine = inspect.iscoroutinefunction(func)
156 |         tool_registry[func.__name__] = ToolSpec(func=func, func_schema=schema, is_coroutine=is_coroutine)
    |                                                                                         ^^^^^^^^^^^^^^^^^ E501
157 |         return func
158 |     return decorator
    |

src/agentic_ai/utils/core/schemas.py:1:1: D100 Missing docstring in public module
src/agentic_ai/utils/core/schemas.py:4:7: D101 Missing docstring in public class
  |
2 | from typing import Any, Type, Optional, Callable
3 |
4 | class ToolSpec(BaseModel):
  |       ^^^^^^^^ D101
5 |       func: Callable
6 |       func_schema: Type[BaseModel]
  |

src/agentic_ai/utils/core/schemas.py:9:7: D101 Missing docstring in public class
   |
 7 |       is_coroutine: bool
 8 |
 9 | class LLMResponse(BaseModel):
   |       ^^^^^^^^^^^ D101
10 |     final_response: str
11 |     parsed_response: Optional[Any] = None
   |

src/agentic_ai/utils/core/schemas.py:13:7: D101 Missing docstring in public class
   |
11 |     parsed_response: Optional[Any] = None
12 |
13 | class ExtraResponseSettings(BaseModel):
   |       ^^^^^^^^^^^^^^^^^^^^^ D101
14 |     temperature: Optional[float] = 0.5
15 |     max_tokens: Optional[int] = 30_000
   |

src/agentic_ai/utils/logger/__init__.py:1:1: D104 Missing docstring in public package
src/agentic_ai/utils/logger/__init__.py:1:21: F401 `.logger.Logger` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .logger import Logger, add_context_to_log
  |                     ^^^^^^ F401
  |
  = help: Use an explicit re-export: `Logger as Logger`

src/agentic_ai/utils/logger/__init__.py:1:29: F401 `.logger.add_context_to_log` imported but unused; consider removing, adding to `__all__`, or using a redundant alias
  |
1 | from .logger import Logger, add_context_to_log
  |                             ^^^^^^^^^^^^^^^^^^ F401
  |
  = help: Use an explicit re-export: `add_context_to_log as add_context_to_log`

src/agentic_ai/utils/logger/colorfulFormatter.py:1:1: N999 Invalid module name: 'colorfulFormatter'
src/agentic_ai/utils/logger/colorfulFormatter.py:1:1: D100 Missing docstring in public module
src/agentic_ai/utils/logger/colorfulFormatter.py:6:7: D101 Missing docstring in public class
  |
5 | # ANSI color codes
6 | class Colors:
  |       ^^^^^^ D101
7 |     # Reset
8 |     RESET = '\033[0m'
  |

src/agentic_ai/utils/logger/colorfulFormatter.py:48:5: D415 First line should end with a period, question mark, or exclamation point
   |
46 | # Custom colorful formatter
47 | class ColoredJSONFormatter(jsonlogger.JsonFormatter):
48 |     """A JSON formatter that adds colors to the output"""
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ D415
49 |     
50 |     LEVEL_COLORS = {
   |
   = help: Add closing punctuation

src/agentic_ai/utils/logger/colorfulFormatter.py:66:9: ANN201 Missing return type annotation for public function `format`
   |
64 |     }
65 |     
66 |     def format(self, record):
   |         ^^^^^^ ANN201
67 |         # Get the base JSON string
68 |         json_str = super().format(record)
   |
   = help: Add return type annotation

src/agentic_ai/utils/logger/colorfulFormatter.py:66:9: D102 Missing docstring in public method
   |
64 |     }
65 |     
66 |     def format(self, record):
   |         ^^^^^^ D102
67 |         # Get the base JSON string
68 |         json_str = super().format(record)
   |

src/agentic_ai/utils/logger/colorfulFormatter.py:66:22: ANN001 Missing type annotation for function argument `record`
   |
64 |     }
65 |     
66 |     def format(self, record):
   |                      ^^^^^^ ANN001
67 |         # Get the base JSON string
68 |         json_str = super().format(record)
   |

src/agentic_ai/utils/logger/logger.py:1:1: D100 Missing docstring in public module
src/agentic_ai/utils/logger/logger.py:26:9: ANN204 Missing return type annotation for special method `__init__`
   |
24 |     """
25 |
26 |     def __init__(self, pattern_to_find: str = "'type': 'file', 'file':"):
   |         ^^^^^^^^ ANN204
27 |         """Initializes the filter.
   |
   = help: Add return type annotation: `None`

src/agentic_ai/utils/logger/logger.py:30:89: E501 Line too long (92 > 88)
   |
29 |         Args:
30 |             pattern_to_find (str): The specific string pattern to search for in log messages
   |                                                                                         ^^^^ E501
31 |                                    to identify records that need redaction.
32 |         """
   |

src/agentic_ai/utils/logger/logger.py:50:89: E501 Line too long (89 > 88)
   |
48 |             bool: Always returns True, as records are modified, not suppressed.
49 |         """
50 |         # The log record's message might not be formatted yet, so we get the full string.
   |                                                                                         ^ E501
51 |         message = record.getMessage()
   |

src/agentic_ai/utils/logger/logger.py:67:89: E501 Line too long (89 > 88)
   |
65 |                     delattr(record, 'message')
66 |
67 |         return True  # Always allow the record to be logged (either original or redacted)
   |                                                                                         ^ E501
68 |     
69 | class ContextAwareQueueHandler(logging.handlers.QueueHandler):
   |

src/agentic_ai/utils/logger/logger.py:70:5: D200 One-line docstring should fit on one line
   |
69 |   class ContextAwareQueueHandler(logging.handlers.QueueHandler):
70 | /     """Injects dynamic fields before enqueing
71 | |     """
   | |_______^ D200
72 |       def prepare(self, record):
73 |           context = LOG_CONTEXT.get()
   |
   = help: Reformat to one line

src/agentic_ai/utils/logger/logger.py:70:5: D415 First line should end with a period, question mark, or exclamation point
   |
69 |   class ContextAwareQueueHandler(logging.handlers.QueueHandler):
70 | /     """Injects dynamic fields before enqueing
71 | |     """
   | |_______^ D415
72 |       def prepare(self, record):
73 |           context = LOG_CONTEXT.get()
   |
   = help: Add closing punctuation

src/agentic_ai/utils/logger/logger.py:72:9: ANN201 Missing return type annotation for public function `prepare`
   |
70 |     """Injects dynamic fields before enqueing
71 |     """
72 |     def prepare(self, record):
   |         ^^^^^^^ ANN201
73 |         context = LOG_CONTEXT.get()
74 |         for key, value in context.items():
   |
   = help: Add return type annotation

src/agentic_ai/utils/logger/logger.py:72:9: D102 Missing docstring in public method
   |
70 |     """Injects dynamic fields before enqueing
71 |     """
72 |     def prepare(self, record):
   |         ^^^^^^^ D102
73 |         context = LOG_CONTEXT.get()
74 |         for key, value in context.items():
   |

src/agentic_ai/utils/logger/logger.py:72:23: ANN001 Missing type annotation for function argument `record`
   |
70 |     """Injects dynamic fields before enqueing
71 |     """
72 |     def prepare(self, record):
   |                       ^^^^^^ ANN001
73 |         context = LOG_CONTEXT.get()
74 |         for key, value in context.items():
   |

src/agentic_ai/utils/logger/logger.py:78:7: D101 Missing docstring in public class
   |
76 |         return super().prepare(record)
77 |
78 | class Logger():
   |       ^^^^^^ D101
79 |     def __init__(self, colorful_output=True) -> None:
80 |         self.colorful_output = colorful_output
   |

src/agentic_ai/utils/logger/logger.py:79:9: D107 Missing docstring in `__init__`
   |
78 | class Logger():
79 |     def __init__(self, colorful_output=True) -> None:
   |         ^^^^^^^^ D107
80 |         self.colorful_output = colorful_output
81 |         self.queue_handler = self.__set_up_queue_handler()
   |

src/agentic_ai/utils/logger/logger.py:79:24: ANN001 Missing type annotation for function argument `colorful_output`
   |
78 | class Logger():
79 |     def __init__(self, colorful_output=True) -> None:
   |                        ^^^^^^^^^^^^^^^ ANN001
80 |         self.colorful_output = colorful_output
81 |         self.queue_handler = self.__set_up_queue_handler()
   |

src/agentic_ai/utils/logger/logger.py:88:9: ANN202 Missing return type annotation for private function `__set_up_queue_handler`
   |
86 |         atexit.register(self.shutdown)
87 |                 
88 |     def __set_up_queue_handler(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^ ANN202
89 |         log_queue = queue.Queue(-1)
90 |         console_handler = self.__bind_handlers()
   |
   = help: Add return type annotation

src/agentic_ai/utils/logger/logger.py:105:9: ANN202 Missing return type annotation for private function `__bind_formatter`
    |
103 |         return stream_handler
104 |     
105 |     def __bind_formatter(self):
    |         ^^^^^^^^^^^^^^^^ ANN202
106 |         if not self.colorful_output:
107 |             formatter = jsonlogger.JsonFormatter(
    |
    = help: Add return type annotation

src/agentic_ai/utils/logger/logger.py:120:9: ANN201 Missing return type annotation for public function `shutdown`
    |
118 |             return formatter
119 |     
120 |     def shutdown(self):
    |         ^^^^^^^^ ANN201
121 |         """Stops the QueueListener and flushes any remaining logs.
122 |         """
    |
    = help: Add return type annotation: `None`

src/agentic_ai/utils/logger/logger.py:121:9: D200 One-line docstring should fit on one line
    |
120 |       def shutdown(self):
121 | /         """Stops the QueueListener and flushes any remaining logs.
122 | |         """
    | |___________^ D200
123 |           if self.listener:
124 |               logging.info("Shutting down logging listener...")
    |
    = help: Reformat to one line

src/agentic_ai/utils/logger/logger.py:127:89: E501 Line too long (91 > 88)
    |
125 |             self.listener.stop()
126 |             logging.info("Logging listener stopped.")
127 |         # Remove the queue handler from the root logger to prevent further logging attempts
    |                                                                                         ^^^ E501
128 |         if self.queue_handler in self.root_logger.handlers:
129 |             self.root_logger.removeHandler(self.queue_handler)
    |

src/agentic_ai/utils/logger/logger.py:134:5: ANN201 Missing return type annotation for public function `add_context_to_log`
    |
133 | @contextmanager
134 | def add_context_to_log(**kwargs):
    |     ^^^^^^^^^^^^^^^^^^ ANN201
135 |     """A context manager to add dynamic data to logs.
136 |     """
    |
    = help: Add return type annotation

src/agentic_ai/utils/logger/logger.py:134:24: ANN003 Missing type annotation for `**kwargs`
    |
133 | @contextmanager
134 | def add_context_to_log(**kwargs):
    |                        ^^^^^^^^ ANN003
135 |     """A context manager to add dynamic data to logs.
136 |     """
    |

src/agentic_ai/utils/logger/logger.py:135:5: D200 One-line docstring should fit on one line
    |
133 |   @contextmanager
134 |   def add_context_to_log(**kwargs):
135 | /     """A context manager to add dynamic data to logs.
136 | |     """
    | |_______^ D200
137 |       current_context = LOG_CONTEXT.get()
138 |       new_context = {**current_context, **kwargs}
    |
    = help: Reformat to one line

Found 157 errors.
No fixes available (12 hidden fixes can be enabled with the `--unsafe-fixes` option).
